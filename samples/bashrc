#    _               _
#   | |__   __ _ ___| |__  _ __ ___
#   | '_ \ / _` / __| '_ \| '__/ __|
#  _| |_) | (_| \__ \ | | | | | (__
# (_)_.__/ \__,_|___/_| |_|_|  \___|
# file for interactive shells executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color|*-256color) color_prompt=yes;;
	xterm-kitty)            color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
		if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
		else
	color_prompt=
		fi
fi

# Find info about git and add it to the prompt.
git_info () {
	# Don't run this code if it's not going to be useful
	git rev-parse --git-dir &>/dev/null || return

	# Get easy to parse info
	_status="$(git status -b --porcelain=v2 2>/dev/null)"

	# Prepare tag, branch name or commit hash (that's the order of priority)
	branch="$(echo "$_status" | awk '$2 ~ /head/ {print $NF}')"
	[ "$branch" = "(detached)" ] && \
		branch="$(echo "$_status" | awk '$2 ~ /oid/ {print substr($NF,1,8)}')"
	_tag=$(git describe --tags --exact-match $branch 2>/dev/null)
	[ -n "$_tag" ] && branch=$_tag

	# Process info
	_commiting="$(echo "$_status" | grep "^[0-9]\s[MADRCU]."   | wc -l)"
	_ahead="$(echo "$_status"     | awk '$2 ~ /ab/ {print $3}' | sed -e "s/\+//")"
	_behind="$(echo "$_status"    | awk '$2 ~ /ab/ {print $4}' | sed -e "s/\-//")"
	_modified="$(echo "$_status"  | grep "^[0-9]\s.[MADRCU]"   | wc -l)"
	_untracked="$(echo "$_status" | grep "^\?"                 | wc -l)"

	# Prepare simbols for the reader
	[ "$_commiting" -gt 0 ] && info+=" +"
	[ "$_ahead"     -gt 0 ] && info+=" ↑"
	[ "$_behind"    -gt 0 ] && info+=" ↓"
	[ "$_modified"  -gt 0 ] && info+=" ✎"
	[ "$_untracked" -gt 0 ] && info+=" ?"

	# Build the prompt info
	[ -n "$branch" ] && printf "%s%s%f%s" "$1" "$branch" "$info"
	unset branch _branch _ahead _behind _modified _untracked _status _tag info
}


if [ "$color_prompt" = yes ]; then
	PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[02m\][\$?]\[\033[00;01;33m\]\$(git_info ' ') \[\033[00;01;34m\]\w\[\033[00m\]\$ "
else
	PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[32m\]\u@\h\[\033[00m\]: \[\033[02m\][$?] \[\033[00;34m\]\w\[\033[m\]\$ '
	# PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
	PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	;;
*)
	;;
esac
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Some ls aliases
alias lla='ls -lahF --group-directories-first'
alias llz='ls -lahFZ --group-directories-first'
alias ll='ls -lABhF --group-directories-first'
alias la='ls -ABhF --group-directories-first'
alias l='ls -lBhF --group-directories-first'
alias lz='ls -lBhFZ --group-directories-first'

# Create a new directory and cd into it
new() {
	mkdir "$1" && cd "$1"
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into separate files in the ~/.bashrc.d folder
# like ~/.bashrc.d/aliases.sh, instead of adding them here directly.

# User specific aliases and functions
[ -d ~/.bashrc.d ] && \
	for i in $(ls ~/.bashrc.d); do
		. ~/.bashrc.d/$i
	done

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi
